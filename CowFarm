-- Program for cow farm turtle. REQUIRES farmStorage and turtleUtils v1.1.x

-- Place wireless modem on left side of turtle
-- Constants
requiredWheat = 48
requiredFuel = 500
--requiredFuel = 20000
waitTime = 6*60 -- Seconds between breed cycles

-- Item to request for fuel
fuelItem = {name="minecraft:log",damage=1}

-- How mant stacks of wheat/fuel to keep in local chest
cachedWheat = 3
cachedFuel = 2

fuelDirection = "right"
wheatDirection = "up"

WHEAT = {name='minecraft:wheat',damage=0}

rednet.open('left')
os.loadAPI("farmStorage")
os.loadAPI("turtleUtils")

--  Breeds the cows with Wheat
function breed()
	-- Wait for cows
	os.sleep(1)
	
	-- Place wheat
	for i=1,200,1 do
		turtle.place()
	end
end


-- Fires a 2 tick pulse of redstone on the left and right of the turtle
function redstonePulse()
	redstone.setOutput("left", true)
	redstone.setOutput("right", true)
	os.sleep(0.2)
	redstone.setOutput("left", false)
	redstone.setOutput("right", false)
end

-- Go through all the stations and perform a breed cycle
function breedCycle()
	turtle.select(1)
	print("Starting breed cycle")
	
	-- Check fuel
	if turtle.getFuelLevel() < requiredFuel or turtleUtils.tally(WHEAT) < requiredWheat then
		getSupplies()
	end
	
	turtleUtils.selectItem(WHEAT)

	turtle.forward()
	turtle.forward()
	turtle.forward()
	turtle.forward()
	turtle.forward()
	
	turtle.turnRight()
	turtle.forward()
	redstonePulse()
	breed()
	redstonePulse()
	turtle.back()
	
	turtle.back()
	redstonePulse()
	turtle.turnLeft()
	turtle.turnLeft()
	breed()
	turtle.turnRight()
	turtle.turnRight()
	redstonePulse()
	turtle.forward()
	turtle.turnLeft()
	
	turtle.forward()
	turtle.forward()
	turtle.forward()
	turtle.forward()
	
	turtle.turnLeft()
	turtle.back()
	redstonePulse()
	turtle.turnLeft()
	turtle.turnLeft()
	breed()
	turtle.turnLeft()
	turtle.turnLeft()
	redstonePulse()
	
	turtle.forward()
	turtle.forward()
	redstonePulse()
	breed()
	redstonePulse()
	turtle.back()
	turtle.turnRight()
	
	for i=1,9,1 do
		turtle.back()
	end
end

-- Make sure turtle has supplies
function getSupplies()
	-- Check if there's wheat or fuel in chest
	for i=1,16,1 do
		turtle.suckUp()
	end
	
	turtleUtils.attemptRefuel()
	
	local fuelSuccess = turtle.getFuelLevel() >= requiredFuel
	local wheatSuccess = turtleUtils.tally(WHEAT) >= requiredWheat
	
	if fuelSuccess and wheatSuccess then return
	-- Order supplies from storage system
	else
		print("Ordering supplies...")
		orderSupplies(not fuelSuccess, not wheatSuccess)
	end
	
	-- Wait for supplies
	while (not fuelSuccess) or (not wheatSuccess) do
		turtle.suckUp()
		
		wheatSuccess = turtleUtils.tally(WHEAT) >= requiredWheat
		if (not fuelSuccess) and turtleUtils.tally(fuelItem) >= 16 then
			turtleUtils.attemptRefuel()
			fuelSuccess = turtle.getFuelLevel() >= requiredFuel
		end
	end
	turtleUtils.dropItemUp(fuelItem)
	turtleUtils.dropItemUp(WHEAT, requiredWheat-10)
	turtleUtils.collate()
	
end

-- Order supplies from the storage system
-- @return Order successful
function orderSupplies(needsFuel, needsWheat)
	local shipment = nil
	if needsFuel and needsWheat then
		shipment = {{item=fuelItem, count=cachedFuel}, {item=WHEAT,count=cachedWheat}}
	elseif needsFuel then
		shipment = {{item=fuelItem, count=cachedFuel}}
	elseif needsWheat then
		shipment = {{item=WHEAT,count=cachedWheat}}
	else
		print("Shipment must contain wheat or fuel.")
		return false
	end
	
	return farmStorage.requestShipment(shipment)
end

-- Main loop
function main()
	while true do
		breedCycle()
		os.sleep(waitTime)
	end
end
		

main()
